var imgIndex = 1;
let sliceAnimationTime = 1.2;
let imgScaleAnimationTime = 0.5;
let transitionTime = 10000;
let bannerBox = document.querySelectorAll(".banner__main");
console.log(bannerBox);
let ti;
for (let i = 1; i <= bannerBox.length; i++) {
    bannerBox[i - 1].classList.add(`image-${i}`);
    bannerBox[i - 1].style.zIndex = `${(bannerBox.length - i) + 1}`;
}
// start and reset function
function start() {
    let tl = gsap.timeline();
    imgIndex = 1;
    for (let i = 1; i <= bannerBox.length; i++) {
        for (let j = 1; j <= 8; j++) {
            tl.set(".image-" + i + ">.sect" + j, { y: "0%" });
        }
    }

    //   first call
    sliceAnimation(imgIndex);

    //   for subsequent calls after 9 second internval
    // let leftbtn = document.querySelector(".left_banner");
    ti = setInterval(() => {
        sliceAnimation(++imgIndex);
    }, transitionTime);
    
    // leftbtn.addEventListener("click", () => {
    //     sliceAnimation(++imgIndex);
    // }, transitionTime);
}

// to give the scale down animation
function imgScale(index) {
    let tl = gsap.timeline();
    tl.fromTo(
        ".image-" + index,
        imgScaleAnimationTime, {
            scale: 1.5,
            ease: Power3.easeInOut
        }, { scale: 1 },
        0.5
    );

    //   clearing interval after 4 cycles and calling the start function
    if (index === (bannerBox.length)) {
        clearInterval(ti);

        setTimeout(() => {
            start();
        }, (transitionTime - 1));
    }
}

// slice transition animation function
function sliceAnimation(index) {
    let tl = gsap.timeline();
    imgScale(index + 1);
    for (let i = 1; i <= 8; i++) {
        if (i === 1 || i === 3 || i === 7) {
            tl.to(
                ".image-" + index + ">.sect" + i,
                sliceAnimationTime, {
                    y: "-=100%",
                    ease: Power3.easeInOut
                },
                0.15
            );
        } else if (i === 2 || i === 5 || i === 8) {
            tl.to(
                ".image-" + index + ">.sect" + i,
                sliceAnimationTime, {
                    y: "-=100%",
                    ease: Power3.easeInOut
                },
                0.3
            );
        } else if (i === 4 || i === 6) {
            tl.to(
                ".image-" + index + ">.sect" + i,
                sliceAnimationTime, {
                    y: "-=100%",
                    ease: Power3.easeInOut
                },
                0.25
            );
        }
    }
}

start();





let section1 = document.getElementById("section1");
var scene = new THREE.Scene();
scene.background = new THREE.Color(0xffffff);
document.addEventListener('mousemove', onMouseMove, false);
var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
var mouseX;
var mouseY;

var renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);

section1.appendChild(renderer.domElement);

window.addEventListener("resize", function() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});

var distance = Math.min(200, window.innerWidth / 4);
var geometry = new THREE.Geometry();

for (var i = 0; i < 1600; i++) {

    var vertex = new THREE.Vector3();

    var theta = THREE.Math.randFloatSpread(360);
    var phi = THREE.Math.randFloatSpread(360);

    vertex.x = distance * Math.sin(theta) * Math.cos(phi);
    vertex.y = distance * Math.sin(theta) * Math.sin(phi);
    vertex.z = distance * Math.cos(theta);

    geometry.vertices.push(vertex);
}
var particles = new THREE.Points(geometry, new THREE.PointsMaterial({ color: 0x043b64, size: 1 }));
particles.boundingSphere = 10;


var renderingParent = new THREE.Group();
renderingParent.add(particles);

var resizeContainer = new THREE.Group();
resizeContainer.add(renderingParent);
scene.add(resizeContainer);

camera.position.z = 10;

var animate = function() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
};
var myTween;

function onMouseMove(event) {
    if (myTween)
        myTween.kill();

    mouseX = (event.clientX / window.innerWidth) * 2 - 1;
    mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
    myTween = gsap.to(particles.rotation, { duration: 0.1, x: mouseY * -1, y: mouseX });
    //particles.rotation.x = mouseY*-1;
    //particles.rotation.y = mouseX;
}
animate();

// Scaling animation
var animProps = { scale: 1, xRot: 0, yRot: 0 };
gsap.to(animProps, {
    duration: 10,
    scale: 1.3,
    repeat: -1,
    yoyo: true,
    ease: "sine",
    onUpdate: function() {
        renderingParent.scale.set(animProps.scale, animProps.scale, animProps.scale);
    }
});

gsap.to(animProps, {
    duration: 120,
    xRot: Math.PI * 2,
    yRot: Math.PI * 4,
    repeat: -1,
    yoyo: true,
    ease: "none",
    onUpdate: function() {
        renderingParent.rotation.set(animProps.xRot, animProps.yRot, 0);
    }
});